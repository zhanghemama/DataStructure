数组是一种线性表的数据结构，只有前后两个方向，它是一组连续的内存空间，来存储一组具有相同数据类型的数据。支持随机访问，
但是插入和删除比较耗时。因为数组连续所以在插入和删除的时候需要做大量的数据搬移工作。
那么数组怎么实现下标随机访问呢？计算机会给每块儿内存分配一个地址，我们可以根据地址来访问内存存储的内容。我们要访问
数组中某个下标的元素时，首先根据寻址公式计算出该元素的地址，公式如下，
int[] a = new int[10]
a[i]_address = base_address + i * data_type_size // base_address是数组的首地址，data_type_size是存储的数
据类型的字节大小
根据上面的寻址公式计算出地址，就可以访问改地址的内容了。根据下标随机访问的时间复杂度为O(1)。
数组低效的插入和删除：
数组长度为n，如果在k处插入一个元素，那为了把第k个位置空出来，k～n的位置要依此后移。平均时间复杂度为O(n)。插在某个
位置的概率为1/n，在第一个位置插入，需要移动n个元素，在第二个位置插入需要移动n-1个，依此类推。。。平均复杂度为
（1+...+n）/n
删除操作和插入操作类似，为了内存的连续性也需要搬移数据。删除的效率可以通过下面的方式来提高，当需要删除某个元素的
时候，我们先标记，等数组重新调整内存大小的时候再真正删除。python中list就是这样做的。许多语言中的垃圾回收机制也是如此，
标记-清除算法在垃圾收集时会先标记出需要回收的对象，标记完成后统一回收所有被标记的对象。清除之后会产生大量不连续的
内存碎片。标记-整理垃圾回收算法在标记完成之后让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。
